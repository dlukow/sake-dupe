type = "UCEC"
canctype <- combined[combined$Type == type,]
#subset combined data for those with a p53 mutation
p53mutsub <- canctype[canctype$Sample %in% p53mutID,]
#subset combined data for those with p53 WT
p53WTsub <- canctype[!(canctype$Sample %in% p53mutID),]
#organize data set by AS, take the top and bottom quintile for analysis
dat <-canctype[order(canctype$`AneuploidyScore(AS)`),]
top20 <- tail(dat, n = 0.2*dim(dat)[1])
bot20 <- head(dat, n = 0.2*dim(dat)[1])
x <- as.data.frame(matrix(ncol =2, nrow = 2))
colnames(x) <- c("Top20","Bottom20")
rownames(x) <- c("Response","No Response")
top <- top20$treatment_outcome_first_course
bottom <- bot20$treatment_outcome_first_course
#Fill in data
x[1,1] <- sum(top == "Response")
x[2,1] <- sum(top == "No Response")
x[1,2] <- sum(bottom == "Response")
x[2,2] <- sum(bottom == "No Response")
fisher.test(x)
#organize data set by AS, take the top and bottom quintile for analysis
dat <-canctype[order(canctype$`AneuploidyScore(AS)`),]
top20 <- tail(dat, n = 0.5*dim(dat)[1])
bot20 <- head(dat, n = 0.5*dim(dat)[1])
x <- as.data.frame(matrix(ncol =2, nrow = 2))
colnames(x) <- c("Top20","Bottom20")
rownames(x) <- c("Response","No Response")
top <- top20$treatment_outcome_first_course
bottom <- bot20$treatment_outcome_first_course
#Fill in data
x[1,1] <- sum(top == "Response")
x[2,1] <- sum(top == "No Response")
x[1,2] <- sum(bottom == "Response")
x[2,2] <- sum(bottom == "No Response")
fisher.test(x)
#assign cancer type to analyze
type = "LGG"
canctype <- combined[combined$Type == type,]
#subset combined data for those with a p53 mutation
p53mutsub <- canctype[canctype$Sample %in% p53mutID,]
#subset combined data for those with p53 WT
p53WTsub <- canctype[!(canctype$Sample %in% p53mutID),]
#organize data set by AS, take the top and bottom quintile for analysis
dat <-canctype[order(canctype$`AneuploidyScore(AS)`),]
top20 <- tail(dat, n = 0.5*dim(dat)[1])
bot20 <- head(dat, n = 0.5*dim(dat)[1])
x <- as.data.frame(matrix(ncol =2, nrow = 2))
colnames(x) <- c("Top20","Bottom20")
rownames(x) <- c("Response","No Response")
top <- top20$treatment_outcome_first_course
bottom <- bot20$treatment_outcome_first_course
#Fill in data
x[1,1] <- sum(top == "Response")
x[2,1] <- sum(top == "No Response")
x[1,2] <- sum(bottom == "Response")
x[2,2] <- sum(bottom == "No Response")
fisher.test(x)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(data.table)
library(reshape2)
library(ggplot2)
list_of_files <- list.files(path = "C:/Users/devon/Dropbox (Sheltzer Lab)/Lab Files/R Scripts and Environments/Single Cell Master/Single Cell Sequencing Results/March 2020 Set 1/txtfiles", recursive = TRUE,
pattern = "\\.txt$", full.names = TRUE)
DT <- rbindlist( sapply(list_of_files, fread, simplify = FALSE),
use.names = TRUE, idcol = "FileName" )
#Simplify the FileName so it is just the last 3 identifying digits
DT$FileName <- basename(DT$FileName)
DT$FileName <- gsub(".hg38.5k.k50.varbin.data.txt","",DT$FileName)    #!!!EDIT HERE
DT$FileName <- gsub("BEI016","",DT$FileName)                          #!!!EDIT HERE
fullset <- DT
colnames(fullset)[1] <- "ids"
#Trim fullset
tfullset <- fullset[,c("bin.chrom","bin.start.abspos","seg.quantal","ids")]
CellBL <- read.delim("C:/Users/devon/Dropbox (Sheltzer Lab)/Lab Files/R Scripts and Environments/Single Cell Master/Cell Line Karyotypes Smash/Colo205.txt")
CellBL <- CellBL[,c("abspos","seg.quantal")]
CellBL <- read.delim("C:/Users/devon/Dropbox (Sheltzer Lab)/Lab Files/R Scripts and Environments/Single Cell Master/Cell Line Karyotypes Smash/Colo205.txt")
CellBL <- CellBL[,c("abspos","seg_quantal")]
mean.pos <- function(x,y){
a <- mean(CellBL[(CellBL$abspos>x)&(CellBL$abspos<y),"seg.quantal"])
return(a)
}
#Create a list of bins for absolute genomic position
loc <- as.numeric(unique(tfullset$bin.start.abspos))
a <- as.list(NULL)
#create a list of mean copy number at each bin based on SMASH data
for (i in 1:length(loc)){
a[i] <- mean.pos(loc[i],loc[i+1])
}
idlist <- unique(fullset$ids)
idlist
View(CellBL)
chrlist <- c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
#Order fullset based on chromosomes in a desired order (chrlist)
fullset$bin.chrom <- factor(fullset$bin.chrom, levels = chrlist)
#Cast full data set as the ut data set for mode ratio calcualtion
castfull <- dcast(tfullset, ids~bin.start.abspos, value.var = "seg.quantal")
ratiotable <- castfull
b <- c(0,a)
for (i in 2:5001){
ratiotable[,i] <- (ratiotable[,i] - b[[i]])
}
ratiotable <- melt(ratiotable)
colnames(ratiotable)[2] <- "bin.start.abspos"
colnames(ratiotable)[3] <- "CNV"
####Find a way to reassociate bin.chrom into the ratiotable for closer examination of certain chromosomes
chrompos <- unique(tfullset[,c("bin.chrom","bin.start.abspos")])
ratiotable <- as.data.frame(ratiotable)
chrompos <- as.data.frame(chrompos)
data <- merge(ratiotable, chrompos)
####---- create a new matrix with the mean CNV at each id and chr position for heatmapping
#loop to create new matrix
chrdata <- as.data.frame(NULL)
for (i in 1:length(idlist)){
for (y in 1:length(chrlist)){
chrdata[i,y] <- mean(data[data$ids == idlist[[i]] & data$bin.chrom == chrlist[[y]],3])
}
}
colnames(chrdata) <- chrlist
rownames(chrdata) <- idlist
chrdata$id <- idlist
chrdata <- melt(chrdata)
colnames(chrdata) <- c("id","chrom","logratio")
chromgates <- fullset[c(1:5000),]
chromgates$num <- seq(1:5000)
chromgates <- chromgates[chromgates$bin.start.chrompos == 0 & chromgates$id == idlist[1], "num"]
chromgates <- as.data.frame(chromgates)
colnames(chromgates)[1] <- "pos"
#### set a cap on the decrease/increase in copy number
trncdata <- ratiotable
index <- ratiotable$CNV < -4
trncdata$CNV[index] <- -4
index2 <- ratiotable$CNV > 4
trncdata$CNV[index2] <- 4
#remove NaN
orddata <-trncdata
ordlist <- c("320","328","330","331","332","340","341","342","343","344","345","352","353","354","355","356","357","364","365","366","368","369","376","377","378","379","380","381","389","390","392","403","405","322","323","334","335","336","337","339","346","347","348","349","350","351","358","360","361","362","363","370","371","372","373","383","384","385","387","397","407","409","410","411")
cellgates <- seq(1.5, length(ordlist)+0.5, by = 1)
orddata$ids <- factor(orddata$ids, levels = ordlist)
orddata <- orddata[orddata$ids %in% ordlist,]
rnddata <- orddata
rnddata$CNV <- round(rnddata$CNV)
p <- ggplot(data=orddata, aes(x = bin.start.abspos, y = ids)) +
geom_tile(aes(fill=CNV)) +
scale_fill_gradientn(colours = c("blue","gray","yellow")) +
ylab("Cell") +
xlab("Absolute Genomic Position") +
geom_vline(data = chromgates, aes(xintercept = pos), color="black", size = 1.5)  +
geom_hline(yintercept = cellgates, color = "white") +
geom_hline(yintercept= c(33.5), color = "black", size = 2)+
theme(
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
p
View(ratiotable)
View(CellBL)
View(castfull)
View(tfullset)
View(a)
View(b)
View(a)
data.class(CellBL$seg_quantal)
CellBL <- read.delim("C:/Users/devon/Dropbox (Sheltzer Lab)/Lab Files/R Scripts and Environments/Single Cell Master/Cell Line Karyotypes Smash/Colo205.txt")
CellBL <- CellBL[,c("abspos","seg_quantal")]
mean.pos <- function(x,y){
a <- mean(CellBL[(CellBL$abspos>x)&(CellBL$abspos<y),"seg.quantal"])
return(a)
}
#Create a list of bins for absolute genomic position
loc <- as.numeric(unique(tfullset$bin.start.abspos))
a <- as.list(NULL)
#create a list of mean copy number at each bin based on SMASH data
for (i in 1:length(loc)){
a[i] <- mean.pos(loc[i],loc[i+1])
}
data.class(CellBL$abspos)
data.class(tfullset$bin.start.abspos)
tfullset$bin.start.abspos <- as.numeric(tfullset$bin.start.abspos)
CellBL <- read.delim("C:/Users/devon/Dropbox (Sheltzer Lab)/Lab Files/R Scripts and Environments/Single Cell Master/Cell Line Karyotypes Smash/Colo205.txt")
CellBL <- CellBL[,c("abspos","seg_quantal")]
mean.pos <- function(x,y){
a <- mean(CellBL[(CellBL$abspos>x)&(CellBL$abspos<y),"seg.quantal"])
return(a)
}
#Create a list of bins for absolute genomic position
loc <- as.numeric(unique(tfullset$bin.start.abspos))
a <- as.list(NULL)
#create a list of mean copy number at each bin based on SMASH data
for (i in 1:length(loc)){
a[i] <- mean.pos(loc[i],loc[i+1])
}
View(CellBL)
CellBL <- read.delim("C:/Users/devon/Dropbox (Sheltzer Lab)/Lab Files/R Scripts and Environments/Single Cell Master/Cell Line Karyotypes Smash/Colo205.txt")
CellBL <- CellBL[,c("abspos","seg_quantal")]
mean.pos <- function(x,y){
a <- mean(CellBL[(CellBL$abspos>x)&(CellBL$abspos<y),"seg_quantal"])
return(a)
}
#Create a list of bins for absolute genomic position
loc <- as.numeric(unique(tfullset$bin.start.abspos))
a <- as.list(NULL)
#create a list of mean copy number at each bin based on SMASH data
for (i in 1:length(loc)){
a[i] <- mean.pos(loc[i],loc[i+1])
}
chrlist <- c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
#Order fullset based on chromosomes in a desired order (chrlist)
fullset$bin.chrom <- factor(fullset$bin.chrom, levels = chrlist)
#Cast full data set as the ut data set for mode ratio calcualtion
castfull <- dcast(tfullset, ids~bin.start.abspos, value.var = "seg.quantal")
ratiotable <- castfull
b <- c(0,a)
for (i in 2:5001){
ratiotable[,i] <- (ratiotable[,i] - b[[i]])
}
ratiotable <- melt(ratiotable)
colnames(ratiotable)[2] <- "bin.start.abspos"
colnames(ratiotable)[3] <- "CNV"
####Find a way to reassociate bin.chrom into the ratiotable for closer examination of certain chromosomes
chrompos <- unique(tfullset[,c("bin.chrom","bin.start.abspos")])
ratiotable <- as.data.frame(ratiotable)
chrompos <- as.data.frame(chrompos)
data <- merge(ratiotable, chrompos)
####---- create a new matrix with the mean CNV at each id and chr position for heatmapping
#loop to create new matrix
chrdata <- as.data.frame(NULL)
for (i in 1:length(idlist)){
for (y in 1:length(chrlist)){
chrdata[i,y] <- mean(data[data$ids == idlist[[i]] & data$bin.chrom == chrlist[[y]],3])
}
}
colnames(chrdata) <- chrlist
rownames(chrdata) <- idlist
chrdata$id <- idlist
chrdata <- melt(chrdata)
colnames(chrdata) <- c("id","chrom","logratio")
chromgates <- fullset[c(1:5000),]
chromgates$num <- seq(1:5000)
chromgates <- chromgates[chromgates$bin.start.chrompos == 0 & chromgates$id == idlist[1], "num"]
chromgates <- as.data.frame(chromgates)
colnames(chromgates)[1] <- "pos"
#### set a cap on the decrease/increase in copy number
trncdata <- ratiotable
index <- ratiotable$CNV < -4
trncdata$CNV[index] <- -4
index2 <- ratiotable$CNV > 4
trncdata$CNV[index2] <- 4
#remove NaN
orddata <-trncdata
ordlist <- c("320","328","330","331","332","340","341","342","343","344","345","352","353","354","355","356","357","364","365","366","368","369","376","377","378","379","380","381","389","390","392","403","405","322","323","334","335","336","337","339","346","347","348","349","350","351","358","360","361","362","363","370","371","372","373","383","384","385","387","397","407","409","410","411")
cellgates <- seq(1.5, length(ordlist)+0.5, by = 1)
orddata$ids <- factor(orddata$ids, levels = ordlist)
orddata <- orddata[orddata$ids %in% ordlist,]
rnddata <- orddata
rnddata$CNV <- round(rnddata$CNV)
p <- ggplot(data=orddata, aes(x = bin.start.abspos, y = ids)) +
geom_tile(aes(fill=CNV)) +
scale_fill_gradientn(colours = c("blue","gray","yellow")) +
ylab("Cell") +
xlab("Absolute Genomic Position") +
geom_vline(data = chromgates, aes(xintercept = pos), color="black", size = 1.5)  +
geom_hline(yintercept = cellgates, color = "white") +
geom_hline(yintercept= c(33.5), color = "black", size = 2)+
theme(
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
p
orddata <-trncdata
ordlist <- c("320","330","331","332","340","341","342","343","352","353","354","355","356","357","364","365","366","376","377","378","379","380","381","403","405","322","323","334","335","336","337","358","360","361","362","363","383","384","385","387","411")
cellgates <- seq(1.5, length(ordlist)+0.5, by = 1)
orddata$ids <- factor(orddata$ids, levels = ordlist)
orddata <- orddata[orddata$ids %in% ordlist,]
rnddata <- orddata
rnddata$CNV <- round(rnddata$CNV)
p <- ggplot(data=orddata, aes(x = bin.start.abspos, y = ids)) +
geom_tile(aes(fill=CNV)) +
scale_fill_gradientn(colours = c("blue","gray","yellow")) +
ylab("Cell") +
xlab("Absolute Genomic Position") +
geom_vline(data = chromgates, aes(xintercept = pos), color="black", size = 1.5)  +
geom_hline(yintercept = cellgates, color = "white") +
geom_hline(yintercept= c(33.5), color = "black", size = 2)+
theme(
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
p
p <- ggplot(data=orddata, aes(x = bin.start.abspos, y = ids)) +
geom_tile(aes(fill=CNV)) +
scale_fill_gradientn(colours = c("blue","gray","yellow")) +
ylab("Cell") +
xlab("Absolute Genomic Position") +
geom_vline(data = chromgates, aes(xintercept = pos), color="black", size = 1.5)  +
geom_hline(yintercept = cellgates, color = "white") +
geom_hline(yintercept= c(21.5), color = "black", size = 2)+
theme(
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
p
p <- ggplot(data=orddata, aes(x = bin.start.abspos, y = ids)) +
geom_tile(aes(fill=CNV)) +
scale_fill_gradientn(colours = c("blue","gray","yellow")) +
ylab("Cell") +
xlab("Absolute Genomic Position") +
geom_vline(data = chromgates, aes(xintercept = pos), color="black", size = 1.5)  +
geom_hline(yintercept = cellgates, color = "white") +
geom_hline(yintercept= c(25.5), color = "black", size = 2)+
theme(
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
p
p
list_of_files <- list.files(path = "C:/Users/devon/Dropbox (Sheltzer Lab)/Lab Files/R Scripts and Environments/Single Cell Master/Single Cell Sequencing Results/March 2020 Colo Set 2/txtfiles", recursive = TRUE,
pattern = "\\.txt$", full.names = TRUE)
DT <- rbindlist( sapply(list_of_files, fread, simplify = FALSE),
use.names = TRUE, idcol = "FileName" )
#Simplify the FileName so it is just the last 3 identifying digits
DT$FileName <- basename(DT$FileName)
DT$FileName <- gsub(".hg38.5k.k50.varbin.data.txt","",DT$FileName)    #!!!EDIT HERE
DT$FileName <- gsub("BEI016","",DT$FileName)                          #!!!EDIT HERE
fullset <- DT
colnames(fullset)[1] <- "ids"
#Trim fullset
tfullset <- fullset[,c("bin.chrom","bin.start.abspos","seg.quantal","ids")]
#make sure abspos is numeric
tfullset$bin.start.abspos <- as.numeric(tfullset$bin.start.abspos)
idlist <- unique(fullset$ids)
idlist
CellBL <- read.delim("C:/Users/devon/Dropbox (Sheltzer Lab)/Lab Files/R Scripts and Environments/Single Cell Master/Cell Line Karyotypes Smash/Colo205.txt")
CellBL <- CellBL[,c("abspos","seg_quantal")]
mean.pos <- function(x,y){
a <- mean(CellBL[(CellBL$abspos>x)&(CellBL$abspos<y),"seg_quantal"])
return(a)
}
#Create a list of bins for absolute genomic position
loc <- as.numeric(unique(tfullset$bin.start.abspos))
a <- as.list(NULL)
#create a list of mean copy number at each bin based on SMASH data
for (i in 1:length(loc)){
a[i] <- mean.pos(loc[i],loc[i+1])
}
chrlist <- c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","chrX","chrY")
#Order fullset based on chromosomes in a desired order (chrlist)
fullset$bin.chrom <- factor(fullset$bin.chrom, levels = chrlist)
#Cast full data set as the ut data set for mode ratio calcualtion
castfull <- dcast(tfullset, ids~bin.start.abspos, value.var = "seg.quantal")
ratiotable <- castfull
b <- c(0,a)
for (i in 2:5001){
ratiotable[,i] <- (ratiotable[,i] - b[[i]])
}
ratiotable <- melt(ratiotable)
colnames(ratiotable)[2] <- "bin.start.abspos"
colnames(ratiotable)[3] <- "CNV"
####Find a way to reassociate bin.chrom into the ratiotable for closer examination of certain chromosomes
chrompos <- unique(tfullset[,c("bin.chrom","bin.start.abspos")])
ratiotable <- as.data.frame(ratiotable)
chrompos <- as.data.frame(chrompos)
data <- merge(ratiotable, chrompos)
####---- create a new matrix with the mean CNV at each id and chr position for heatmapping
#loop to create new matrix
chrdata <- as.data.frame(NULL)
for (i in 1:length(idlist)){
for (y in 1:length(chrlist)){
chrdata[i,y] <- mean(data[data$ids == idlist[[i]] & data$bin.chrom == chrlist[[y]],3])
}
}
colnames(chrdata) <- chrlist
rownames(chrdata) <- idlist
chrdata$id <- idlist
chrdata <- melt(chrdata)
colnames(chrdata) <- c("id","chrom","logratio")
chromgates <- fullset[c(1:5000),]
chromgates$num <- seq(1:5000)
chromgates <- chromgates[chromgates$bin.start.chrompos == 0 & chromgates$id == idlist[1], "num"]
chromgates <- as.data.frame(chromgates)
colnames(chromgates)[1] <- "pos"
orddata <-trncdata
#### set a cap on the decrease/increase in copy number
trncdata <- ratiotable
index <- ratiotable$CNV < -4
trncdata$CNV[index] <- -4
index2 <- ratiotable$CNV > 4
trncdata$CNV[index2] <- 4
#remove NaN
orddata <-trncdata
ordlist <- c("415","416","417","424","425","426","427","428","436","437","437","438","441","449","450","451","452","460","461","462","463","464","465","485","486","487","488","489","496","418","420","421","422","430","432","433","435","442","443","435","442","443","445","447","454","455","457","459","466","467","468","469","470","471","480","490","491","492","493","494","495","502","505","506","507")
cellgates <- seq(1.5, length(ordlist)+0.5, by = 1)
orddata$ids <- factor(orddata$ids, levels = ordlist)
orddata <-trncdata
ordlist <- c("415","416","417","424","425","426","427","428","436","437","438","441","449","450","451","452","460","461","462","463","464","465","485","486","487","488","489","496","418","420","421","422","430","432","433","435","442","443","435","442","443","445","447","454","455","457","459","466","467","468","469","470","471","480","490","491","492","493","494","495","502","505","506","507")
cellgates <- seq(1.5, length(ordlist)+0.5, by = 1)
orddata$ids <- factor(orddata$ids, levels = ordlist)
orddata <-trncdata
ordlist <- c("415","416","417","424","425","426","427","428","436","437","438","441","449","450","451","452","460","461","462","463","464","465","485","486","487","488","489","496","418","420","421","422","430","432","433","435","442","443","445","447","454","455","457","459","466","467","468","469","470","471","480","490","491","492","493","494","495","502","505","506","507")
cellgates <- seq(1.5, length(ordlist)+0.5, by = 1)
orddata$ids <- factor(orddata$ids, levels = ordlist)
orddata <- orddata[orddata$ids %in% ordlist,]
rnddata <- orddata
rnddata$CNV <- round(rnddata$CNV)
p <- ggplot(data=orddata, aes(x = bin.start.abspos, y = ids)) +
geom_tile(aes(fill=CNV)) +
scale_fill_gradientn(colours = c("blue","gray","yellow")) +
ylab("Cell") +
xlab("Absolute Genomic Position") +
geom_vline(data = chromgates, aes(xintercept = pos), color="black", size = 1.5)  +
geom_hline(yintercept = cellgates, color = "white") +
geom_hline(yintercept= c(25.5), color = "black", size = 2)+
theme(
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
p
p <- ggplot(data=orddata, aes(x = bin.start.abspos, y = ids)) +
geom_tile(aes(fill=CNV)) +
scale_fill_gradientn(colours = c("blue","gray","yellow")) +
ylab("Cell") +
xlab("Absolute Genomic Position") +
geom_vline(data = chromgates, aes(xintercept = pos), color="black", size = 1.5)  +
geom_hline(yintercept = cellgates, color = "white") +
geom_hline(yintercept= c(27.5), color = "black", size = 2)+
theme(
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
p
p
p <- ggplot(data=orddata, aes(x = bin.start.abspos, y = ids)) +
geom_tile(aes(fill=CNV)) +
scale_fill_gradientn(colours = c("blue","gray","yellow")) +
ylab("Cell") +
xlab("Absolute Genomic Position") +
geom_vline(data = chromgates, aes(xintercept = pos), color="black", size = 1.5)  +
geom_hline(yintercept = cellgates, color = "white") +
geom_hline(yintercept= c(28.5), color = "black", size = 2)+
theme(
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
p
p
#### set a cap on the decrease/increase in copy number
trncdata <- ratiotable
index <- ratiotable$CNV < -2
trncdata$CNV[index] <- -2
index2 <- ratiotable$CNV > 2
trncdata$CNV[index2] <- 2
#remove NaN
orddata <-trncdata
ordlist <- c("415","416","417","424","425","426","427","428","436","437","438","441","449","450","451","452","460","461","462","463","464","465","485","486","487","488","489","496","418","420","421","422","430","432","433","435","442","443","445","447","454","455","457","459","466","467","468","469","470","471","480","490","491","492","493","494","495","502","505","506","507")
cellgates <- seq(1.5, length(ordlist)+0.5, by = 1)
orddata$ids <- factor(orddata$ids, levels = ordlist)
orddata <- orddata[orddata$ids %in% ordlist,]
rnddata <- orddata
rnddata$CNV <- round(rnddata$CNV)
p <- ggplot(data=orddata, aes(x = bin.start.abspos, y = ids)) +
geom_tile(aes(fill=CNV)) +
scale_fill_gradientn(colours = c("blue","gray","yellow")) +
ylab("Cell") +
xlab("Absolute Genomic Position") +
geom_vline(data = chromgates, aes(xintercept = pos), color="black", size = 1.5)  +
geom_hline(yintercept = cellgates, color = "white") +
geom_hline(yintercept= c(28.5), color = "black", size = 2)+
theme(
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
p
install.packages("knitr")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
source("http://bioconductor.org/biocLite.R")
biocLite(c("annotate", "AnnotationHub", "biomaRt", "DESeq2", "gage", "gageData", "GO.db", "pathview", "plotly", "DT"))
install.packages("biocLite")
BiocManager::install(c("annotate", "AnnotationHub", "biomaRt", "DESeq2", "gage", "gageData", "GO.db", "pathview", "plotly", "DT"))
install.packages("devtools")
devtools::install_github("renozao/pkgmaker", ref="develop")
devtools::install_github("naikai/sake")
devtools::install_github("naikai/sake")
devtools::install_github("naikai/sake", CC=gcc-7)
pkgurl <- "https://github.com/naikai/sake/releases/download/0.4.0/sake_0.4.0.tgz"
install.packages(pkgurl, repos=NULL, type="source")
library(sake)
devtools::install_github("naikai/sake")
install.packages(pkgurl, repos=NULL, type="source")
shiny::runApp(system.file("sake", package="sake"))
setwd("C:/Users/devon/Dropbox (Sheltzer Lab)/Lab Files/R Scripts and Environments/sake-master")
library(devtools)
build()
source("http://bioconductor.org/biocLite.R")
biocLite(c("annotate", "AnnotationHub", "biomaRt", "DESeq2", "gage", "gageData", "GO.db", "pathview", "plotly", "DT"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
source("http://bioconductor.org/biocLite.R")
biocLite(c("annotate", "AnnotationHub", "biomaRt", "DESeq2", "gage", "gageData", "GO.db", "pathview", "plotly", "DT"))
BiocManager::install(c("annotate", "AnnotationHub", "biomaRt", "DESeq2", "gage", "gageData", "GO.db", "pathview", "plotly", "DT"))
build()
install.packages(c('NMF', 'caret', 'corrplot', 'd3heatmap', 'Rtsne', 'shinythemes', 'shinyBS', 'shinydashboard', 'snowfall', 'networkD3'))
build()
install.packages("d3heatmap")
BiocManager::install("d3heatmap")
install.packages("d3heatmap")
devtools::install_github("naikai/sake")
build()
